name: Auto-Merge-PRs

on:
  pull_request_target:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Merge PR
        id: mergepr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Attempt to merge the pull request using the squash method
              const response = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: "squash"
              })

              // Check if the merge was successful by checking the status code of the response
              if (response.status === 200) {
                const happyCelebrationsGifs = [
                  "https://i.imgur.com/MigSwFi.gif",
                  "https://media.tenor.com/vH8aIdO0YI4AAAAM/anime-kantai-collection.gif",
                  "https://i.pinimg.com/originals/99/44/94/9944941e219589ba7f482d64d5aa20c1.gif",
                  "https://i.pinimg.com/originals/89/a1/4e/89a14ee7bb058ea0126b12b19d9430c5.gif",
                  "https://i.pinimg.com/originals/75/4a/7f/754a7f46800ae4e3392f8dffaf98cdcd.gif",
                  "https://i.pinimg.com/originals/1a/7b/22/1a7b22158ba7ad7852e24124760e687b.gif",
                  "https://i.pinimg.com/originals/8c/e6/d7/8ce6d74d5a786f88da89100b5c65cb8c.gif",
                  "https://i.pinimg.com/originals/90/95/a6/9095a6f3c55a8241c657175876c90ba1.gif"
                ]

                const getRandomGif = () => happyCelebrationsGifs[Math.floor(Math.random() * happyCelebrationsGifs.length)]
                const getMergeMessage = (username) => {
                  const greeting = `“Excellent, @${username}! 🎉 😊🏆. Thank you for your collaboration. Remember, if you liked the project, you can give it a ⭐`;
                  const gif = `![celebration gif](${getRandomGif()})`;
                  return `${greeting}\n\n${gif}`;
                }

                // Generate the merge message using the getMergeMessage function
                const message = getMergeMessage(context.payload.pull_request.user.login);

                // Post a comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                })
              }
            } catch (error) {
              console.error(`Error merging pull request: ${error}`)
            }

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Starting deployment to production..."
          echo "Deployment complete."
